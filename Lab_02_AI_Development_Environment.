{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMIvlyNj3KIkOO9XIUtVJcn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sohaib-khan0/cs351-ai-lab-2022551/blob/main/Lab_02_AI_Development_Environment.\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "psib3A6a5W70",
        "outputId": "8aae986b-241a-405b-a9bf-180c6df93306"
      },
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Welcome to the Monster Chase Game!\n",
            "Instructions: Reach the safe zone 'Z' before the monster 'M' catches you. Avoid obstacles 'X'.\n"
          ]
        }
      ],
      "source": [
        "import queue  # Importing queue to implement BFS\n",
        "import random  # Importing random to place player, monster, and safe zone\n",
        "\n",
        "# Function to create the grid with player, monster, and safe zone\n",
        "def create_grid_with_monster(size):\n",
        "    grid = [[' ' for _ in range(size)] for _ in range(size)]  # Create an empty grid filled with spaces\n",
        "\n",
        "    # Place the player at a random position\n",
        "    player_x, player_y = random.randint(0, size-1), random.randint(0, size-1)\n",
        "    grid[player_x][player_y] = 'P'\n",
        "\n",
        "    # Place the monster at a random position, different from the player\n",
        "    monster_x, monster_y = random.randint(0, size-1), random.randint(0, size-1)\n",
        "    while (monster_x, monster_y) == (player_x, player_y):\n",
        "        monster_x, monster_y = random.randint(0, size-1), random.randint(0, size-1)\n",
        "    grid[monster_x][monster_y] = 'M'\n",
        "\n",
        "    # Place the safe zone at a random position, different from both player and monster\n",
        "    safe_x, safe_y = random.randint(0, size-1), random.randint(0, size-1)\n",
        "    while (safe_x, safe_y) == (player_x, player_y) or (safe_x, safe_y) == (monster_x, monster_y):\n",
        "        safe_x, safe_y = random.randint(0, size-1), random.randint(0, size-1)\n",
        "    grid[safe_x][safe_y] = 'Z'\n",
        "\n",
        "    return grid, (player_x, player_y), (monster_x, monster_y), (safe_x, safe_y)\n",
        "\n",
        "# Function to add random obstacles to the grid\n",
        "def add_obstacles(grid, num_obstacles):\n",
        "    size = len(grid)\n",
        "    for _ in range(num_obstacles):\n",
        "        obstacle_x, obstacle_y = random.randint(0, size-1), random.randint(0, size-1)\n",
        "        while grid[obstacle_x][obstacle_y] in ['P', 'M', 'Z', 'X']:\n",
        "            obstacle_x, obstacle_y = random.randint(0, size-1), random.randint(0, size-1)\n",
        "        grid[obstacle_x][obstacle_y] = 'X'  # Place the obstacle 'X'\n",
        "    return grid\n",
        "\n",
        "# Function to check if a position is valid (within bounds and not blocked by an obstacle)\n",
        "def is_valid_position(grid, x, y):\n",
        "    size = len(grid)\n",
        "    return 0 <= x < size and 0 <= y < size and grid[x][y] not in ['X', 'M']  # Ensure it's not blocked or occupied by monster\n",
        "\n",
        "# BFS function for finding the shortest path\n",
        "def bfs(grid, start, goal):\n",
        "    size = len(grid)\n",
        "    q = queue.Queue()  # Create a queue for BFS\n",
        "    q.put(start)  # Start from the initial position\n",
        "    visited = set()  # Set to track visited positions\n",
        "    visited.add(start)  # Mark start as visited\n",
        "    parent = {}  # Dictionary to store the parent of each state for path reconstruction\n",
        "\n",
        "    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Possible directions: up, down, left, right\n",
        "\n",
        "    while not q.empty():\n",
        "        current = q.get()  # Get the current position from the queue\n",
        "\n",
        "        # If we reach the goal, stop the search\n",
        "        if current == goal:\n",
        "            break\n",
        "\n",
        "        # Explore neighboring positions (up, down, left, right)\n",
        "        for direction in directions:\n",
        "            next_x = current[0] + direction[0]  # Calculate next x-coordinate\n",
        "            next_y = current[1] + direction[1]  # Calculate next y-coordinate\n",
        "            next_state = (next_x, next_y)  # Form the next state (position)\n",
        "\n",
        "            # Check if the next position is valid and not already visited\n",
        "            if is_valid_position(grid, next_x, next_y) and next_state not in visited:\n",
        "                q.put(next_state)  # Add the valid position to the queue\n",
        "                visited.add(next_state)  # Mark as visited\n",
        "                parent[next_state] = current  # Track how we reached this state\n",
        "\n",
        "    # Reconstruct the path from start to goal\n",
        "    path = []\n",
        "    current = goal  # Start from the goal and work backwards\n",
        "    while current != start:\n",
        "        path.append(current)  # Add current position to the path\n",
        "        current = parent.get(current, start)  # Move to the parent of the current state\n",
        "    path.append(start)  # Add the start position to the path\n",
        "    path.reverse()  # Reverse the path to start from the beginning (start to goal)\n",
        "\n",
        "    return path\n",
        "\n",
        "# Function to print the grid with lines and the path marked\n",
        "def print_grid_with_monster_and_path(grid, player_pos, monster_pos, path):\n",
        "    grid_with_path = [row.copy() for row in grid]  # Copy the original grid to preserve it\n",
        "    for (x, y) in path:\n",
        "        if grid_with_path[x][y] not in ['P', 'M', 'Z']:  # Don't overwrite player, monster, or safe zone\n",
        "            grid_with_path[x][y] = '*'  # Mark the path with '*'\n",
        "\n",
        "    grid_with_path[player_pos[0]][player_pos[1]] = 'P'  # Mark player position\n",
        "    grid_with_path[monster_pos[0]][monster_pos[1]] = 'M'  # Mark monster position\n",
        "\n",
        "    # Print the grid with lines to separate cells clearly\n",
        "    print(\"\\nGrid with Path:\")\n",
        "    print('-' * (len(grid_with_path) * 4 + 1))  # Print top border line\n",
        "    for row in grid_with_path:\n",
        "        print('| ' + ' | '.join(row) + ' |')  # Print row with borders between cells\n",
        "        print('-' * (len(grid_with_path) * 4 + 1))  # Print horizontal line after each row\n",
        "\n",
        "# Main function to play the game\n",
        "def monster_chase():\n",
        "    print(\"Welcome to the Monster Chase Game!\")\n",
        "    print(\"Instructions: Reach the safe zone 'Z' before the monster 'M' catches you. Avoid obstacles 'X'.\")\n",
        "\n",
        "    # Ask the user for grid size and number of obstacles\n",
        "    while True:\n",
        "        try:\n",
        "            size = int(input(\"Enter the grid size (e.g., 6 for a 6x6 grid): \"))\n",
        "            num_obstacles = int(input(f\"Enter the number of obstacles (less than {size * size - 3}): \"))\n",
        "            if num_obstacles < 0 or num_obstacles >= size * size - 3:\n",
        "                print(\"Invalid number of obstacles. Please try again.\")\n",
        "                continue\n",
        "            break\n",
        "        except ValueError:\n",
        "            print(\"Please enter valid integers.\")\n",
        "\n",
        "    # Create the grid and place the player, monster, and safe zone\n",
        "    grid, player_pos, monster_pos, safe_zone = create_grid_with_monster(size)\n",
        "\n",
        "    # Add random obstacles to the grid\n",
        "    grid = add_obstacles(grid, num_obstacles)\n",
        "\n",
        "    # Print the initial grid\n",
        "    print(\"\\nInitial Grid:\")\n",
        "    print_grid_with_monster_and_path(grid, player_pos, monster_pos, [])  # Empty path initially\n",
        "\n",
        "    # Game loop\n",
        "    while True:\n",
        "        # Player moves toward the safe zone\n",
        "        path_to_safe_zone = bfs(grid, player_pos, safe_zone)\n",
        "        if len(path_to_safe_zone) > 1:\n",
        "            player_pos = path_to_safe_zone[1]  # Move player to the next step on the path\n",
        "        else:\n",
        "            print(\"\\nYou are trapped! The monster is too close, and you cannot reach the safe zone!\")\n",
        "            break\n",
        "\n",
        "        # Check if player reached the safe zone\n",
        "        if player_pos == safe_zone:\n",
        "            print(\"\\nYou reached the safe zone! You win!\")\n",
        "            break\n",
        "\n",
        "        # Monster moves toward the player\n",
        "        path_to_player = bfs(grid, monster_pos, player_pos)\n",
        "        if len(path_to_player) > 1:\n",
        "            monster_pos = path_to_player[1]  # Move monster to the next step on the path\n",
        "        else:\n",
        "            print(\"\\nThe monster is trapped and cannot reach you!\")\n",
        "            break\n",
        "\n",
        "        # Check if monster caught the player\n",
        "        if monster_pos == player_pos:\n",
        "            print(\"\\nThe monster caught you! Game over!\")\n",
        "            break\n",
        "\n",
        "        # Print the updated grid with the player's and monster's positions\n",
        "        print_grid_with_monster_and_path(grid, player_pos, monster_pos, path_to_safe_zone)\n",
        "\n",
        "# Run the game\n",
        "monster_chase()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lab_02_AI_Development_Environment.ipyn"
      ],
      "metadata": {
        "id": "jG6pYl1c5ecu"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "cv_aAc8R5nzz"
      }
    }
  ]
}